ðŸ“˜ Application Idea: "TaskFlow" â€“ A Personal Task Manager API

Description:
Build a RESTful API for a personal task manager called TaskFlow. It allows users to create, update, delete, and retrieve tasks. Each task can have a status, priority, due date, and labels. Tasks can be grouped into projects.

This gives you a realistic CRUD app with some complexity and relationshipsâ€”perfect for practicing Onion Architecture in Java.

ðŸ§± Suggested Tech Stack
- Language: Java 17+
- Framework: Spring Boot
- Build Tool: Maven or Gradle
- Database: PostgreSQL or H2 (for simplicity)
- ORM: JPA (Hibernate)
- API: REST (with Spring Web)
- Testing: JUnit, Mockito
- Architecture: Onion (Clean)

ðŸ§… Onion Architecture Breakdown
- Domain Layer (Core):
  - [DONE] Entities: Task, Project, Label
  - [DONE] Enums: TaskStatus, TaskPriority
  - Interfaces: TaskRepository, ProjectRepository, LabelRepository
  - [DONE] Business rules (e.g., "a task must belong to a project")

- Application Layer:
  - Use Cases / Services: CreateTaskService, UpdateTaskStatusService, etc.
  - Interfaces for persistence injected via constructor
  - DTOs and Mapper interfaces

- Infrastructure Layer:
  - JPA implementations of repositories
  - Database config, Spring Data JPA repositories
  - Mapping logic (e.g., MapStruct or manual mapping)

- Presentation Layer (API):
  - REST Controllers
  - Exception handlers
  - JSON DTOs

ðŸ“¦ Key Features to Implement

ðŸ”¹ Projects
- POST /projects â€“ Create a new project
- GET /projects/{id} â€“ Get project details
- GET /projects â€“ List all projects

ðŸ”¹ Tasks
- POST /projects/{id}/tasks â€“ Add task to a project
- GET /projects/{id}/tasks â€“ List tasks in a project
- PUT /tasks/{id} â€“ Edit task (change title, due date, priority, etc.)
- PATCH /tasks/{id}/status â€“ Update task status
- DELETE /tasks/{id} â€“ Delete a task

ðŸ”¹ Labels (optional for bonus)
- Tasks can have multiple labels (many-to-many)
- POST /labels
- GET /labels
- PATCH /tasks/{id}/labels â€“ Add/remove labels on a task

ðŸ§ª Bonus Practice Ideas
- Pagination & filtering (?status=IN_PROGRESS&dueBefore=2025-08-01)
- Basic authentication (username/password)
- Input validation with Bean Validation (e.g., @NotNull)
- Custom exception handling (@ControllerAdvice)
- Testing services and controllers with mocks